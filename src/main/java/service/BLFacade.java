
package service;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.3.2
 * Generated source version: 2.2
 * 
 */
@WebService(name = "BLFacade", targetNamespace = "http://businessLogic/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface BLFacade {


    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "isLogin", targetNamespace = "http://businessLogic/", className = "service.IsLogin")
    @ResponseWrapper(localName = "isLoginResponse", targetNamespace = "http://businessLogic/", className = "service.IsLoginResponse")
    @Action(input = "http://businessLogic/BLFacade/isLoginRequest", output = "http://businessLogic/BLFacade/isLoginResponse")
    public boolean isLogin(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1);

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns service.Question
     * @throws QuestionAlreadyExist_Exception
     * @throws EventFinished_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createQuestion", targetNamespace = "http://businessLogic/", className = "service.CreateQuestion")
    @ResponseWrapper(localName = "createQuestionResponse", targetNamespace = "http://businessLogic/", className = "service.CreateQuestionResponse")
    @Action(input = "http://businessLogic/BLFacade/createQuestionRequest", output = "http://businessLogic/BLFacade/createQuestionResponse", fault = {
        @FaultAction(className = EventFinished_Exception.class, value = "http://businessLogic/BLFacade/createQuestion/Fault/EventFinished"),
        @FaultAction(className = QuestionAlreadyExist_Exception.class, value = "http://businessLogic/BLFacade/createQuestion/Fault/QuestionAlreadyExist")
    })
    public Question createQuestion(
        @WebParam(name = "arg0", targetNamespace = "")
        Event arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        float arg2)
        throws EventFinished_Exception, QuestionAlreadyExist_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns java.util.List<service.Event>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getEvents", targetNamespace = "http://businessLogic/", className = "service.GetEvents")
    @ResponseWrapper(localName = "getEventsResponse", targetNamespace = "http://businessLogic/", className = "service.GetEventsResponse")
    @Action(input = "http://businessLogic/BLFacade/getEventsRequest", output = "http://businessLogic/BLFacade/getEventsResponse")
    public List<Event> getEvents(
        @WebParam(name = "arg0", targetNamespace = "")
        XMLGregorianCalendar arg0);

    /**
     * 
     * @param arg0
     * @return
     *     returns java.util.List<javax.xml.datatype.XMLGregorianCalendar>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getEventsMonth", targetNamespace = "http://businessLogic/", className = "service.GetEventsMonth")
    @ResponseWrapper(localName = "getEventsMonthResponse", targetNamespace = "http://businessLogic/", className = "service.GetEventsMonthResponse")
    @Action(input = "http://businessLogic/BLFacade/getEventsMonthRequest", output = "http://businessLogic/BLFacade/getEventsMonthResponse")
    public List<XMLGregorianCalendar> getEventsMonth(
        @WebParam(name = "arg0", targetNamespace = "")
        XMLGregorianCalendar arg0);

    /**
     * 
     */
    @WebMethod
    @RequestWrapper(localName = "initializeBD", targetNamespace = "http://businessLogic/", className = "service.InitializeBD")
    @ResponseWrapper(localName = "initializeBDResponse", targetNamespace = "http://businessLogic/", className = "service.InitializeBDResponse")
    @Action(input = "http://businessLogic/BLFacade/initializeBDRequest", output = "http://businessLogic/BLFacade/initializeBDResponse")
    public void initializeBD();

}
